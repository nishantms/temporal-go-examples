version: '3.8'

services:
  # PostgreSQL database for Temporal (optional - for production-like setup)
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: temporal
      POSTGRES_PASSWORD: temporal
      POSTGRES_DB: temporal
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - temporal-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U temporal"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Temporal server with PostgreSQL backend
  temporal-postgres:
    image: temporalio/temporal-server:latest
    ports:
      - "7233:7233"
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgres
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development.yaml
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - temporal-network
    command: ['temporal-server', 'start', '--env', 'development']
    healthcheck:
      test: ["CMD", "temporal", "workflow", "list", "--address", "temporal-postgres:7233"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Temporal server with SQLite (simpler setup)
  temporal-sqlite:
    image: temporalio/temporal-server:latest
    ports:
      - "7234:7233"  # Different port to avoid conflicts
    environment:
      - TEMPORAL_CLI_SHOW_STACKS=1
    volumes:
      - temporal-data:/tmp
    networks:
      - temporal-network
    command: ['temporal-server', 'start', '--env', 'development', '--db', 'sqlite', '--filename', '/tmp/temporal.db', '--ip', '0.0.0.0']
    healthcheck:
      test: ["CMD", "temporal", "workflow", "list", "--address", "temporal-sqlite:7233"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Temporal Web UI
  temporal-web:
    image: temporalio/temporal-web:latest
    ports:
      - "8080:8080"
    environment:
      - TEMPORAL_GRPC_ENDPOINT=temporal-sqlite:7233  # Change to temporal-postgres:7233 for PostgreSQL
      - TEMPORAL_PERMIT_WRITE_API=true
    depends_on:
      temporal-sqlite:  # Change to temporal-postgres for PostgreSQL
        condition: service_healthy
    networks:
      - temporal-network

  # Go application container
  temporal-go-examples:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "8081:8081"  # For any web services you might add
    volumes:
      - .:/app
      - go-modules:/go/pkg/mod
      - /var/run/docker.sock:/var/run/docker.sock  # For Docker-in-Docker
    working_dir: /app
    environment:
      - TEMPORAL_HOSTPORT=temporal-sqlite:7233  # Change to temporal-postgres:7233 for PostgreSQL
    depends_on:
      temporal-sqlite:  # Change to temporal-postgres for PostgreSQL
        condition: service_healthy
    networks:
      - temporal-network
    # Override the default command for development
    command: ["/app/run-examples-only.sh"]
    stdin_open: true
    tty: true

volumes:
  postgres-data:
  temporal-data:
  go-modules:

networks:
  temporal-network:
    driver: bridge
