# Lightweight Dockerfile for just Go development
FROM golang:1.21-alpine

# Install necessary packages
RUN apk add --no-cache \
    git \
    bash \
    curl \
    netcat-openbsd \
    ca-certificates

# Set working directory
WORKDIR /app

# Copy go modules first for better caching
COPY go.mod go.sum ./
RUN go mod download

# Copy source code
COPY . .

# Build all examples
RUN go build -o bin/ ./...

# Create a helper script to run examples
RUN cat > /app/run-example.sh << 'EOF'
#!/bin/bash

if [ -z "$1" ]; then
    echo "Usage: ./run-example.sh <example-name> [worker|client]"
    echo ""
    echo "Available examples:"
    ls -1 examples/ | grep -E '^[0-9]' | sed 's/^/  - /'
    echo ""
    echo "Example usage:"
    echo "  ./run-example.sh 01-hello-world worker"
    echo "  ./run-example.sh 01-hello-world client"
    exit 1
fi

EXAMPLE=$1
TYPE=${2:-worker}

if [ ! -d "examples/$EXAMPLE" ]; then
    echo "‚ùå Example '$EXAMPLE' not found!"
    echo ""
    echo "Available examples:"
    ls -1 examples/ | grep -E '^[0-9]' | sed 's/^/  - /'
    exit 1
fi

if [[ "$TYPE" != "worker" && "$TYPE" != "client" ]]; then
    echo "‚ùå Type must be 'worker' or 'client'"
    exit 1
fi

# Check if Temporal server is reachable
TEMPORAL_HOST=${TEMPORAL_HOSTPORT:-localhost:7233}
if ! nc -z ${TEMPORAL_HOST/:/ } 2>/dev/null; then
    echo "‚ö†Ô∏è  Warning: Cannot reach Temporal server at $TEMPORAL_HOST"
    echo "   Make sure Temporal server is running first!"
    echo ""
fi

echo "üöÄ Running $EXAMPLE $TYPE..."
echo "üìÇ Working directory: examples/$EXAMPLE"
echo "üîó Temporal server: $TEMPORAL_HOST"
echo ""

cd examples/$EXAMPLE

if [ ! -f "$TYPE/main.go" ]; then
    echo "‚ùå File $TYPE/main.go not found in examples/$EXAMPLE/"
    exit 1
fi

echo "‚ñ∂Ô∏è  Executing: go run $TYPE/main.go"
echo "----------------------------------------"
go run $TYPE/main.go
EOF

# Create a status check script
RUN cat > /app/check-temporal.sh << 'EOF'
#!/bin/bash

TEMPORAL_HOST=${TEMPORAL_HOSTPORT:-localhost:7233}

echo "üîç Checking Temporal server status..."
echo "üì° Temporal endpoint: $TEMPORAL_HOST"

if nc -z ${TEMPORAL_HOST/:/ } 2>/dev/null; then
    echo "‚úÖ Temporal server is reachable!"
else
    echo "‚ùå Cannot reach Temporal server at $TEMPORAL_HOST"
    echo ""
    echo "üí° Make sure Temporal server is running:"
    echo "   - Using Docker: docker run -p 7233:7233 temporalio/temporal-server:latest"
    echo "   - Using our setup: ./scripts/docker-setup.sh"
    echo "   - Using Temporal CLI: temporal server start-dev"
    exit 1
fi
EOF

# Make scripts executable
RUN chmod +x /app/run-example.sh /app/check-temporal.sh

# Default environment variables
ENV TEMPORAL_HOSTPORT=localhost:7233

# Expose any ports your application might use
EXPOSE 8081

# Default command shows usage
CMD ["bash", "-c", "echo 'üéØ Temporal Go Examples'; echo ''; echo 'Available commands:'; echo '  ./run-example.sh <example> <worker|client>'; echo '  ./check-temporal.sh'; echo '  bash  # Interactive shell'; echo ''; exec bash"]
